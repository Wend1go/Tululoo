#mouse_x
mouse_x
Indicates current mouse X coordinate on screen (read-only)
#mouse_y
mouse_y
Indicates current mouse Y coordinate on screen (read-only)
#room_current
room_current
Indicates current room that game is running (read-only)
.room_speed
room_speed
Indicates target framerate for current room
#fps
fps
Indicates current framerate that game is running at (read-only)
.room_background
room_background
Indicates current room's background image
.room_width
room_width
Indicates width of current room
.room_height
room_height
Indicates height of current room
.room_background_color_show
room_background_color_show
Indicates if screen should be filled with color before drawing
.room_background_color_red
room_background_color_red
Indicates current background color's red component
.room_background_color_green
room_background_color_green
Indicates current background color's green component
.room_background_color_blue
room_background_color_blue
Indicates current background color's blue component
.room_viewport_width
room_viewport_width
Indicates width of viewport in current room
.room_viewport_height
room_viewport_height
Indicates height of viewport in current room
.room_viewport_object
room_viewport_object
Indicates object type that viewport should follow
.room_viewport_hborder
room_viewport_hborder
Indicates horizontal 'border' of viewport (for following)
.room_viewport_vborder
room_viewport_vborder
Indicates vertical 'border' of viewport (for following)
.room_viewport_x
room_viewport_x
Indicates horizontal offset of viewport in room
.room_viewport_y
room_viewport_y
Indicates vertical offset of viewport in room
!keyboard_check
keyboard_check(key)
Returns if specified key is being held down
!keyboard_check_pressed
keyboard_check_pressed(key)
Returns if specified key was pressed since the last frame
!keyboard_check_released
keyboard_check_released(key)
Returns if specified key was released since the last frame
!mouse_check
mouse_check()
Returns if mouse button is being held down.
!mouse_check_pressed
mouse_check_pressed()
Returns if mouse button was pressed since the last frame
!mouse_check_released
mouse_check_released()
Returns if mouse button was released since the last frame
!vkey_add
vkey_add(x, y, width, height, keycode)
Adds a new virtual key at coordinates to simulate specified keycode
!tu_idle
tu_idle()
Blank function, left so on purpose
!max
max(arg1, arg2, ..., argN)
Returns the largest of given arguments
!min
min(arg1, arg2, ..., argN)
Returns the smallest of given arguments
!round
round(value)
Returns given value, rounded to nearest integer
!floor
floor(value)
Returns given value, rounded down to nearest integer
!ceil
ceil(value)
Returns given value, rounded up to nearest integer
!sin
sin(angle)
Returns sine of given angle (in radians)
!cos
cos(angle)
Returns cosine of given angle (in radians)
!tan
tan(angle)
Returns tangent of given angle (in radians)
!sqrt
sqrt(value)
Returns square root of given value
!rand
rand()
Returns random value between 0 and 1
!arccos
arccos(value)
Returns arccosine of given value (in radians)
!arcsin
arcsin(value)
Returns arcsine of given value (in radians)
!arctan
arctan(value)
Returns arctangent of given value (in radians)
!arctan2
arctan2(y, x)
Returns arctangent for given vector (in radians)
!trace
trace(arg1, arg2, ..., argN)
Sends given values into debug console.
!abs
abs(value)
Returns absolute (positive) amount for given value
!sign
sign(value)
Returns sign of value (0, +1, -1)
!choose
choose(arg1, arg2, ..., argN)
Returns random one of given values
!random
random(value)
Returns a random value between 0 (inclusive) and value (exclusive)
!irandom
irandom(value)
Returns a random integer between 1 (inclusive) and value (inclusive)
!lengthdir_x
lengthdir_x(length, direction)
Returns horizontal component of given vector (direction is in degrees)
!lengthdir_y
lengthdir_y(length, direction)
Returns vertical component of given vector (direction is in degrees)
!point_distance
point_distance(x1, y1, x2, y2)
Returns distance between given points
!point_direction
point_direction(x1, y1, x2, y2)
Returns direction from first to second point (in degrees)
!sound_mode
sound_mode(sound, index)
Background function for sound_* functions
!sound_play
sound_play(sound)
Plays specified sound
!sound_loop
sound_loop(sound)
Loops specified sound
!sound_resume
sound_resume(sound)
Resumes specified sound, at position where it was stopped
!sound_stop
sound_stop(sound)
Stops specified sound
!sound_stop_all
sound_stop_all()
Stops all currently playing sounds
!sound_volume
sound_volume(sound, volume)
Changes volume of specified sound
!draw_sprite
draw_sprite(sprite, subimage, x, y)
Draws a subimage of sprite at given position
!draw_sprite_part
draw_sprite_part(sprite, subimage, left, top, width, height, x, y)
Draws a specified part of sprite at given position
!draw_sprite_ext
draw_sprite_ext(sprite, subimage, x, y, xscale, yscale, rotation, alpha)
Draws a rotated and scaled sprite with given parameters
!draw_text
draw_text(x, y, text)
Draws a string at specified coordinates
!draw_rectangle
draw_rectangle(x1, y1, x2, y2, outline)
Draws a rectangle over specified coordinates
!draw_circle
draw_circle(x, y, radius, outline)
Draws a circle at specified coordinates with given radius
!draw_line
draw_line(x1, y1, x2, y2)
Draws a line between specified points
!draw_set_alpha
draw_set_alpha(alpha)
Sets current drawing alpha (influences drawing of primitives and sprites)
!draw_set_color
draw_set_color(red, green, blue)
Sets current drawing color (influences drawing of primitives)
!draw_set_linewidth
draw_set_linewidth(width)
Sets current line width for outlined primitives
!draw_set_font
draw_set_font(font)
Sets current drawing font
!draw_set_halign
draw_set_halign(align)
Sets current horizontal align for drawn text (fa_left \ fa_center \ fa_right)
!draw_set_valign
draw_set_valign(align)
Sets current vertical align for drawn text (fa_top \ fa_middle \ fa_bottom)
!room_goto
room_goto(scene)
Switches to specified scene
!room_goto_next
room_goto_next()
Switches to next scene
!room_goto_previous
room_goto_previous()
Switches to previous scene
!room_goto_first
room_goto_first()
Switches to first scene
!room_goto_last
room_goto_last()
Switches to last scene
!instance_create
instance_create(x, y, object[, parameters])
Creates instance of given object type.
!instance_number
instance_number(object)
Returns total number of instances of specified object type in scene
!instance_first
instance_first(object)
Returns first instance of specified object type
!instance_position
instance_position(x, y, object)
Returns if specified object\instance overlaps given point
!place_meeting
place_meeting(x, y, object)
Returns if instance would collide with given object\instance if placed at point
!position_meeting
position_meeting(x, y, object)
Returns if specified object\instance overlaps given point
!move_towards_point
move_towards_point(x, y, speed)
Performs a single step towards given point
!instance_destroy
instance_destroy()
Destroys executing instance, removing it from scene till next frame
!save_web_data
save_web_data(key, value)
Saves a value into local storage
!save_web_integer
save_web_integer(key, value)
Saves a integer value into local storage
!save_web_float
save_web_float(key, value)
Saves a floating-point value into local storage
!save_web_string
save_web_string(key, value)
Saves a string value into local storage
!load_web_data
load_web_data(key)
Loads a value from local storage
!load_web_integer
load_web_integer(key)
Loads a integer value from local storage
!load_web_float
load_web_float(key)
Loads a floating-point value from local storage
!load_web_string
load_web_string(key)
Loads a string value from local storage
!delete_web_data
delete_web_data(key)
Removes a value from local storage
!delete_web_integer
delete_web_integer(key)
Removes a integer value from local storage
!delete_web_float
delete_web_float(key)
Removes a floating-point value from local storage
!delete_web_string
delete_web_string(key)
Removes a string value from local storage
!clear_web_data
clear_web_data()
Removes all values from local storage
!web_data_number
web_data_number()
Returns number of values in local storage
!pause_game
pause_game(key)
Pauses execution of game from next step and until given key press
!modal_start
modal_start(instance, draw)
Initiates modal mode, in which only events of one instance are performed
!modal_end
modal_end()
Ends modal mode, returning game to normal execution
!show_mouse
show_mouse()
Displays mouse cursor when over game
!hide_mouse
hide_mouse()
Hides mouse cursor when over game
#id
n/a
n/a
#object_index
n/a
n/a
#self
n/a
n/a
#other
n/a
n/a
#parent
n/a
n/a
.x
n/a
n/a
.y
n/a
n/a
.xstart
n/a
n/a
.ystart
n/a
n/a
.xprevious
n/a
n/a
.yprevious
n/a
n/a
.direction
n/a
n/a
.speed
n/a
n/a
.collision_checking
n/a
n/a
.persistent
n/a
n/a
.instance_active
n/a
n/a
.visible
n/a
n/a
.depth
n/a
n/a
.depthstart
n/a
n/a
.sprite_index
n/a
n/a
.image_index
n/a
n/a
.image_speed
n/a
n/a
.image_xscale
n/a
n/a
.image_yscale
n/a
n/a
.image_angle
n/a
n/a
.image_alpha
n/a
n/a
#tu_sprites
tu_sprites[]
Array with all sprite resources
#tu_audios
tu_audios[]
Array with all audio (sound\music) resources
#tu_backgrounds
tu_backgrounds[]
Array with all background resources
#tu_fonts
tu_fonts[]
Array with all font resources
#tu_scenes
tu_scenes[]
Array with all scene resources
#tu_depth
tu_depth[]
Array with instances stored per-depth
#tu_depthi
tu_depthi[]
Index array for tu_depth
#tu_types
tu_types[]
Array with objects stored per-type (internal)
#tu_persist
tu_persist[]
Array with persistent istances, used between scenes
#key_down
key_down[key]
Array with key states (indicates if keys are down)
#key_pressed
key_pressed[key]
Array with key states (indicates if keys were pressed)
#key_released
key_released[key]
Array with key states (indicates if keys were released)
.tu_vkeys
tu_vkeys[]
Array with virtual keys (created via vkey_add function)
#mouse_down
mouse_down
Indicates if mouse button is being held down
#mouse_pressed
mouse_pressed
Indicates if mouse button was pressed
#mouse_released
mouse_released
Indicates if mouse button was released
#touch_x
touch_x[]
Array with X coordinates of current 'touch points'
#touch_y
touch_y[]
Array with Y coordinates of current 'touch points'
#touch_count
touch_count
Number of current 'touch points'
#tu_wav_supported
tu_wav_supported
Indicates if 'wav' audio files can be played
#tu_ogg_supported
tu_ogg_supported
Indicates if 'ogg' audio files can be played
#tu_mp3_supported
tu_mp3_supported
Indicates if 'mp3' audio files can be played
#tu_canvas
tu_canvas
Reference to main canvas that game is being drawn to
#tu_context
tu_context
Reference to 2d context of main canvas that game is being drawn to
.tu_canvas_css
tu_canvas_css
String, containing CSS rules for main canvas (is applied on scene change)
#tu_frame_time
tu_frame_time
Timestamp for current 'frame' (step)
#tu_prev_frame_time
tu_prev_frame_time
Timestamp for previous 'frame'
#tu_frame_step
tu_frame_step
n/a
#tu_frame_count
tu_frame_count
Number of frames passed since last fps calculation
#tu_elapsed
tu_elapsed
Indicates time passed since last frame
.tu_draw_alpha
tu_draw_alpha
Alpha value for drawing operations
.tu_draw_color_red
tu_draw_color_red
Red color component for drawing operations
.tu_draw_color_green
tu_draw_color_green
Green color component for drawing operations
.tu_draw_color_blue
tu_draw_color_blue
Blue color component for drawing operations
.tu_draw_font
tu_draw_font
Current drawing font
.tu_draw_halign
tu_draw_halign
Horizontal align for drawn text
.tu_draw_valign
tu_draw_valign
Vertical align for drawn text
#tu_loading
tu_loading
Current loading progress
#tu_load_total
tu_load_total
Files to load in total
#tu_keys_pressed
tu_keys_pressed
Array, containing indexes of keys pressed since the last frame
#tu_keys_released
tu_keys_released
Array, containing indexes of keys released since the last frame
.tu_viewport_inst
tu_viewport_inst
Index of object that view shold follow
.tu_redraw
tu_redraw
Indicates if screen should be drawn at next frame
.tu_redraw_auto
tu_redraw_auto
Indicates default value for tu_redraw
#tu_room_to_go
tu_room_to_go
Room that game transits to
.tu_paused
tu_paused
If set to true, keeps game from executing events until tu_unpausekey is pressed
.tu_unpausekey
tu_unpausekey
Key to un-pause the game, when paused with tu_paused
.tu_modal
tu_modal
If not null, indicates instance that is active in modal mode
.tu_modaldraw
tu_modaldraw
For modal mode, indicates if draw events should be executed for instances
#tu_r2d
tu_r2d
Multiplier value for converting radians to degrees
#tu_d2r
tu_d2r
Multiplier value for converting degrees to radians
#tu_2pi
tu_2pi
Contains value of PI, doubled
#fa_left
fa_left
Horizontal left align constant for text
#fa_right
fa_right
Horizontal right align constant for text
#fa_center
fa_center
Horizontal center align constant for text
#fa_top
fa_top
Vertical top align constant for text
#fa_bottom
fa_bottom
Vertical bottom align constant for text
#fa_middle
fa_middle
Vertical middle align constant for text
.global
global
Can be used as container for variables\functions
!_$_
_$_(id)
Returns element of document with given 'id' property
!var_override
var_override(object, name, getter, setter)
Adds getter\setter methods for variable with given name for object
!tu_depth_add
tu_depth_add(depth, instance)
Adds instance to given depth layer
!tu_depth_delete
tu_depth_delete(depth, instance)
Deletes instance from given depth layer
!instance_list
instance_list(object)
Returns an array with all instances that have object in parents
!tu_type_add
tu_type_add(type, instance)
Adds instance to given object type list
!tu_type_delete
tu_type_delete(type, instance)
Deletes instance from given object type list
!tile_add
tile_add(background, left, top, width, height, x, y, depth)
Adds a new tile
!tile_find
tile_find(x, y, width, height, depth)
Returns an array, containing tiles that overlap given rectangle 
!tile_delete
tile_delete(tile)
Deletes given tile
!tile_lrender
tile_lrender(depth)
Renders all tiles at given depth
!on_creation_i
on_creation_i.apply(instance)
Executes inherited (parent) creation event for given instance
!on_destroy_i
on_destroy_i.apply(instance)
Executes inherited (parent) destruction event for given instance
!on_step_i
on_step_i.apply(instance)
Executes inherited (parent) step event for given instance
!on_end_step_i
on_end_step_i.apply(instance)
Executes inherited (parent) end step event for given instance
!on_draw_i
on_draw_i.apply(instance)
Executes inherited (parent) draw event for given instance
!on_collision_i
on_collision_i.apply(instance)
Executes inherited (parent) collision handler event for given instance
!on_animationend_i
on_animationend_i.apply(instance)
Executes inherited (parent) animation end event for given instance
!on_roomstart_i
on_roomstart_i.apply(instance)
Executes inherited (parent) room start event for given instance
!on_roomend_i
on_roomend_i.apply(instance)
Executes inherited (parent) room end event for given instance
!tu_preloader
tu_preloader()
Default preloader draw event (overridable)
!tu_render_back
tu_render_back()
Renders rooms background with current parameters
!instance_activate
instance_activate(instance)
Activates given instance
!instance_deactivate
instance_deactivate(instance)
Deactivates given instance
!instance_foreach
instance_foreach(function(inst))
Executes given function for each active instance
!instance_fordepth
instance_fordepth(depth, function(inst))
Executes given function active instances at depth